name: Slack Notification for Pull Requests

on:
  pull_request:
    types: [opened, reopened, ready_for_review]
    branches: [main]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Create isolated package directory
        run: |
          mkdir -p .github/slack_notification
          cd .github/slack_notification
          cat > package.json << EOF
          {
            "name": "slack-notification",
            "version": "1.0.0",
            "dependencies": {
              "axios": "^1.6.0",
              "moment-timezone": "^0.5.43"
            }
          }
          EOF

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('.github/slack_notification/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install Dependencies
        run: |
          cd .github/slack_notification
          npm install --omit=dev

      - name: Send Slack Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            
            // Add the isolated package directory to the module search path
            process.env.NODE_PATH = path.join(process.env.GITHUB_WORKSPACE, '.github', 'slack_notification', 'node_modules');
            require('module').Module._initPaths();
            
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'scripts', 'slack-notification.js');
            const { sendSlackNotification } = require(scriptPath);
            
            const reviewers = context.payload.pull_request.requested_reviewers
              ? context.payload.pull_request.requested_reviewers.map(reviewer => reviewer.login)
              : [];
            
            try {
              await sendSlackNotification({
                webhook: process.env.SLACK_WEBHOOK_URL,
                context: context,
                reviewers: reviewers,
                customMessage: context.payload.pull_request.title
              });
            } catch (error) {
              core.setFailed(`Failed to send Slack notification: ${error.message}`);
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TIMEZONE: 'Asia/Seoul'
          WORK_HOURS_START: '9'
          WORK_HOURS_END: '18'