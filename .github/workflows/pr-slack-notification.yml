name: Slack Notification

on:
  pull_request:
    types: [opened, reopened, ready_for_review]
    branches: [ main ]
  issue_comment:
    types: [created]

jobs:
  notify:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request != null || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Create temporary directory and package.json
        run: |
          mkdir -p temp_slack_notification
          echo '{
            "name": "slack-notification",
            "version": "1.0.0",
            "dependencies": {
              "axios": "^0.21.1",
              "moment-timezone": "^0.5.33"
            }
          }' > temp_slack_notification/package.json

      - name: Install Dependencies
        run: npm install --omit=dev --prefix ./temp_slack_notification

      - name: Send Slack Notification
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GIT_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const vm = require('vm');
            
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'scripts', 'slack-notification.js');
            const scriptContent = fs.readFileSync(scriptPath, 'utf8');
            
            // Add the temp directory to the module search path
            process.env.NODE_PATH = path.join(process.env.GITHUB_WORKSPACE, 'temp_slack_notification', 'node_modules');
            require('module').Module._initPaths();
            
            const sandbox = {
              require,
              console,
              process,
              __dirname: path.dirname(scriptPath),
              __filename: scriptPath,
              global: {}
            };
            
            vm.runInNewContext(scriptContent, sandbox);
            const sendSlackNotification = sandbox.global.sendSlackNotification;
            
            let reviewers = [];
            if (context.payload.pull_request && context.payload.pull_request.requested_reviewers) {
              reviewers = context.payload.pull_request.requested_reviewers.map(reviewer => reviewer.login);
            }
            
            await sendSlackNotification({
              webhook: process.env.SLACK_WEBHOOK_URL,
              context: context,
              reviewers: reviewers,
              customMessage: context.payload.pull_request ? context.payload.pull_request.title : ''
            });
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WEB_HOOK_URL }}
          TIMEZONE: 'Asia/Seoul'
          WORK_HOURS_START: '9'
          WORK_HOURS_END: '18'

      - name: Clean up
        if: always()
        run: rm -rf temp_slack_notification